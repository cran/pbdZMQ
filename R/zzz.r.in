.onLoad <- function(libname, pkgname){
  zmq.ldflags <- "@ZMQ_LDFLAGS@"
  ext.libs <- "@EXT_LIBS@"

  if(ext.libs == "$(R_ZMQ)"){
    ### Use default zmq library.
    dn <- paste(libname, "/", pkgname, "/libs/", sep = "")
  } else{
    ### Use external zmq library.
    dn <- gsub("-L(.*) -lzmq", "\\1", zmq.ldflags)
    if(gsub(".*(.)$", "\\1", dn) != "/"){
      dn <- paste(dn, "/", sep = "")
    }
  }

  ### Load ZMQ.
  files <- c("libzmq.so", "libzmq.so.dSYM", "libzmq.dylib", "libzmq.4.dylib",
             "libzmq.dll")
  for(i.file in files){
    fn <- paste(dn, i.file, sep = "")
    if(file.exists(fn)){
      ### Load "libzmq.so".
      test <- try(dyn.load(fn, local = FALSE), silent = TRUE)
      if(class(test) == "try-error"){
        stop(paste("Could not load ", fn, sep = ""))
      }
    }
  }

  ### For Mac OSX.
  ### Overwrite RPATH from the shared library installed to the destination.
  if(Sys.info()[['sysname']] == "Darwin"){
    dest <- gsub("/$", "", dn)
    cmd.int <- system("which install_name_tool", intern = TRUE)
    fn.pbdZMQ.so <- file.path(dest, "pbdZMQ.so")
    fn.libzmq.4.dylib <- file.path(dest, "libzmq.4.dylib")

    if(length(grep("install_name_tool", cmd.int)) > 0 &&
       file.exists(fn.pbdZMQ.so) &&
       file.exists(fn.libzmq.4.dylib)){

      ### Check orginal path.
      cmd.ot <- system("which otool", intern = TRUE)
      # if(length(grep("otool", cmd.ot)) > 0){
        rpath <- system(paste(cmd.ot, " -L ", fn.pbdZMQ.so, sep = ""),
                        intern = TRUE)
      #   cat("\nBefore install_name_tool:\n")
      #   print(rpath)
      # }

      # org <- file.path(getwd(), "zmq/lib/libzmq.4.dylib")
      org.rpath <- rpath[grep("\\t/.*/libzmq.4.dylib", rpath)][1]
      org <- gsub("\\t(.*libzmq.4.dylib) \\(.*\\)$", "\\1", org.rpath)
      if(org != fn.libzmq.4.dylib){
        cmd <- paste(cmd.int, " -change ", org, " ", fn.libzmq.4.dylib, " ",
                     fn.pbdZMQ.so, sep = "")
        # cat("\nIn install_name_tool:\n")
        # print(cmd)
        system(cmd)
      }

      ### Check updated path.
      # if(length(grep("otool", cmd.ot)) > 0){
      #   rpath <- system(paste(cmd.ot, " -L ", fn.pbdZMQ.so, sep = ""),
      #                   intern = TRUE)
      #   cat("\nAfter install_name_tool:\n")
      #   print(rpath)
      # }
    }
  }

  ### Load "pbdZMQ.so".
  library.dynam("pbdZMQ", pkgname, libname)

  ### Preload to global environment.
  invisible(eval(parse(text = "pbdZMQ:::.zmqopt_init()")))

  invisible()
} # End of .onLoad().

.onUnload <- function(libpath){
  ### Unload "pbdZMQ.so".
  library.dynam.unload("pbdZMQ", libpath)

  ### Check external.
  zmq.ldflags <- "@ZMQ_LDFLAGS@"
  ext.libs <- "@EXT_LIBS@"

  if(ext.libs == ""){
    ### Use default zmq library.
    dn <- paste(libpath, "/libs/", sep = "")
  } else{
    ### Use external zmq library.
    dn <- gsub("-L(.*) -lzmq", "\\1", zmq.ldflags)
    if(gsub(".*(.)$", "\\1", dn) != "/"){
      dn <- paste(dn, "/", sep = "")
    }
  }

  ### Unload ZMQ.
  files <- c("libzmq.so", "libzmq.so.dSYM", "libzmq.dylib", "libzmq.4.dylib",
             "libzmq.dll")
  for(i.file in files){
    fn <- paste(dn, i.file, sep = "")
    if(file.exists(fn)){
      ### Unload "libzmq.so".
      test <- try(dyn.unload(fn), silent = TRUE)
    }
  }

  invisible()
} # End of .onUnload().

.onAttach <- function(libname, pkgname){
  invisible()
} # End of .onAttach().

